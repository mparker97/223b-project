ssize_t file_search(int fd, char* s, size_t s_len, size_t off, size_t* count_lines){ // search file identified by descriptor fd for string s of length s_len, starting at offset off
	// if count_lines is not NULL, fill it with the number of newline characters before the match
	char buf[CP_BYTES_BUF_SZ + 1];
	ssize_t n_bytes, pos = -1;
	if (count_lines){
		*count_lines = 0;
	}
	do{
		n_bytes = pread(fd, buf, CP_BYTES_BUF_SZ, off);
		if (n_bytes <= 0){
			return -1;
		}
		buf[n_bytes] = 0; // null terminate it
		if (pos >= 0){
			if (!strncmp(buf, s + s_len - (CP_BYTES_BUF_SZ - pos), CP_BYTES_BUF_SZ - pos)){ // found match split between this and last segments
				off -= CP_BYTES_BUF_SZ - pos; // for bytes
				if (count_lines){
					s[s_len - (CP_BYTES_BUF_SZ - pos)] = 0;
					*count_lines -= string_char_count(s, '\n'); // take off newlines counted in the last segment
				}
				break;
			}
		}
		pos = substrn(s, s_len, buf, n_bytes);
		if (pos >= 0 && pos + s_len <= n_bytes){ // found entire match in this segment
			off += pos;
			s[pos] = 0;
			n_bytes = -1;
		}
		else{
			off += n_bytes;
		}
		if (count_lines){
			*count_lines += string_char_count(buf, '\n');
		}
	} while (n_bytes >= 0);
	// TODO: line numbers: how to return them?
out:
	return off;
}

char* pull_string(char* str){
	int i;
	if (str[0] == '"'){
		for (i = 1; str[i] != 0; i++){
			if (str[i] == '"' && str[i - 1] != '\\'){
				str[i] = 0;
				return str + i;
			}
		}
	}
	return NULL;
}

ssize_t substrn(const char* str, size_t str_len, char* src, size_t src_len){ // find a leading portion of str (nonzero length str_len) in src (length src_len); return index of start
	size_t i, j;
	for (i = j = 0; i < src_len; i++){
		if (j == str_len){
			break;
		}
		if (src[i] == str[j]){
			j++;
		}
		else {
			j = 0;
		}
	}
	if (!j)
		return -1;
	else
		return i - j;
}

size_t string_char_count(char* s, char c){
	size_t ret = 0;
	for (s = strchr(s, c); s != NULL; s = strchr(s + 1, c), ret++);
	return ret;
}