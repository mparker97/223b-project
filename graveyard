ssize_t file_search(int fd, char* s, size_t s_len, size_t off, size_t* count_lines){ // search file identified by descriptor fd for string s of length s_len, starting at offset off
	// if count_lines is not NULL, fill it with the number of newline characters before the match
	char buf[CP_BYTES_BUF_SZ + 1];
	ssize_t n_bytes, pos = -1;
	if (count_lines){
		*count_lines = 0;
	}
	do{
		n_bytes = pread(fd, buf, CP_BYTES_BUF_SZ, off);
		if (n_bytes <= 0){
			return -1;
		}
		buf[n_bytes] = 0; // null terminate it
		if (pos >= 0){
			if (!strncmp(buf, s + s_len - (CP_BYTES_BUF_SZ - pos), CP_BYTES_BUF_SZ - pos)){ // found match split between this and last segments
				off -= CP_BYTES_BUF_SZ - pos; // for bytes
				if (count_lines){
					s[s_len - (CP_BYTES_BUF_SZ - pos)] = 0;
					*count_lines -= string_char_count(s, '\n'); // take off newlines counted in the last segment
				}
				break;
			}
		}
		pos = substrn(s, s_len, buf, n_bytes);
		if (pos >= 0 && pos + s_len <= n_bytes){ // found entire match in this segment
			off += pos;
			s[pos] = 0;
			n_bytes = -1;
		}
		else{
			off += n_bytes;
		}
		if (count_lines){
			*count_lines += string_char_count(buf, '\n');
		}
	} while (n_bytes >= 0);
	// TODO: line numbers: how to return them?
out:
	return off;
}

char* pull_string(char* str){
	int i;
	if (str[0] == '"'){
		for (i = 1; str[i] != 0; i++){
			if (str[i] == '"' && str[i - 1] != '\\'){
				str[i] = 0;
				return str + i;
			}
		}
	}
	return NULL;
}

ssize_t substrn(const char* str, size_t str_len, char* src, size_t src_len){ // find a leading portion of str (nonzero length str_len) in src (length src_len); return index of start
	size_t i, j;
	for (i = j = 0; i < src_len; i++){
		if (j == str_len){
			break;
		}
		if (src[i] == str[j]){
			j++;
		}
		else {
			j = 0;
		}
	}
	if (!j)
		return -1;
	else
		return i - j;
}

size_t string_char_count(char* s, char c){
	size_t ret = 0;
	for (s = strchr(s, c); s != NULL; s = strchr(s + 1, c), ret++);
	return ret;
}



// Scrapped
#if 0
#ifndef _REGEX_H
#define _REGEX_H
#include <regex.h>
#include <sys/types.h>
#define REGEX_WINDOW_SIZE 2048 // maximum match length
#define REGEX_CFLAGS REG_EXTENDED
#define REGEX_EFLAGS (REG_NOTBOL | REG_NOTEOL)

void regex_error(regex_t* r, int e){
	char buf[256];
	regerror(e, r, buf, 256);
	fprintf(stderr, "Regex error: %s\n", buf);
}

static int do_regex_comp(regex_t* preg, char* pat){
	int e = regex_comp(preg, pat, REGEX_CFLAGS);
	if (e){
		regex_error(preg, e);
		return -1;
	}
	return 0;
}

int regex_test(char* pat){ // verify that pattern pat is valid regex and has at most one capture
	regex_t preg;
	int ret = 0, i, sb_stk;
	switch (pat[0]){
		case '(':
			ret = 1;
			break;
		case '[':
			sb_stk = 1;
			break;
		default:
			ret = sb_stk = 0;
	}
	for (i = 1; i < strlen(pat); i++){
		switch (pat[i]){
			case '(':
				if (sb_stk == 0 && pat[i - 1] != '\\'){
					if (ret == 1){
						fprintf(stderr, "Regex error: at most one capture is allowed\n");
						ret = -1;
						goto out;
					}
				}
				break;
			case '[':
				if (sb_stk == 0 && pat[i - 1] != '\\'){
					sb_stk = 1;
				}
				break;
			case ']':
				if (pat[i - 1] != '\\'){
					sb_stk = 0;
				}
		}
	}
	ret = do_regex_comp(&preg, pat);
out:
	regfree(&preg);
	return ret;
}

static int do_regexec(size_t* base, size_t* size, regex_t* preg, char* s){
	int ret;
	regmatch_t pmatch[2];
	ret = regexec(preg, s, 2, pmatch, REGEX_EFLAGS);
	if (!ret){ // match found
		if (pmatch[1].re_so >= 0){
			*base = pmatch[1].rm_so;
			*size = pmatch[1].rm_eo;
		}
		else{
			*base = pmatch[0].rm_so;
			*size = pmatch[0].rm_eo;
		}
	}
	return ret;
}

int file_search_regex(size_t* base, size_t* size, int fd, char* pat){ // perform regex pattern pat on file identified by descriptor fd; fill base and size 
	char buf[REGEX_WINDOW_SIZE * 2 + 1];
	regex_t preg;
	size_t off = 0;
	ssize_t n_bytes;
	int ret = -1;
	if (!do_regex_comp(&preg, pat)){
		n_bytes = pread(fd, buf, REGEX_WINDOW_SIZE * 2, off);
		while (n_bytes > 0){
			buf[n_bytes] = 0;
			if (!do_regexec(base, size, &preg, buf)){
				*base += off;
				*size += off;
				ret = 0;
				break;
			}
			off += n_bytes;
			memcpy(buf, buf + REGEX_WINDOW_SIZE, REGEX_WINDOW_SIZE);
			n_bytes = pread(fd, buf + REGEX_WINDOW_SIZE, REGEX_WINDOW_SIZE, off);
		}
	}
	regfree(&preg);
	return ret;
}

int regex_match(size_t* base, size_t* size, char* s, size_t s_len, char* pat){ // perform regex pattern pat on string s of length s_len; fill base and size
	regex_t preg;
	int ret = 0;
	if (!do_regex_comp(&preg, pat)){
		if (do_regexec(base, size, &preg, s)){
			ret = -1;
		}
	}
	regfree(&preg);
	return ret;
}

// Verify that regex patterns still define the interval...
//   not so valuable because changes of other regions earlier in the file could turn into regex matches.
/*
int regex_before(int fd, size_t off, char* pat){
	char buf[REGEX_WINDOW_SIZE + 1];
	
}

ssize_t regex_after(int fd, size_t off, char* pat){
	char buf[REGEX_WINDOW_SIZE + 1];
	size_t base, size;
	n_bytes = pread(fd, buf, REGEX_WINDOW_SIZE, off);
	if (n_bytes > 0){
		buf[n_bytes] = 0;
	}
	if (!regex_match(&base, &size, buf, REGEX_WINDOW_SIZE, pat)){
		if (base != 0){ // check if regex match is immediately after oracle
			goto out;
		}
	}
	fprintf(stderr, "warning: regex does not match immediately after oracle\n");
	regfree(&preg);
}
*/

#endif
#endif

#ifndef PCQ_H
#define PCQ_H
#include <pthread.h>

struct pcq{
	pthread_cond_t empty;
	pthread_cond_t full;
	pthread_mutex_t lock;
	char** q; // pointer to queue
	size_t sz; // max size
	size_t cap; // current capacity
};

static int pcq_init(struct pcq* q, size_t sz){
	if (!(q->q = malloc(sz))){
		return -1;
	}
	q->sz = sz;
	q->cap = 0;
	pthread_mutex_init(&q->lock, NULL);
	pthread_cond_init(&q->empty);
	pthread_cond_init(&q->full);
	return 0;
}

static void pcq_deinit(struct pcq* q){
	freec(q->q);
	q->sz = q->cap = 0;
	pthread_mutex_destroy(&q->lock);
	pthread_cond_destroy(&q->empty);
	pthread_cond_destroy(&q->full);
}

static void pcq_enqueue(struct pcq* q, char* elm){
	pthread_mutex_lock(&q->lock);
	while (q->cap == q->sz)
		pthread_cond_wait(&q->lock, &q->full);
	q->q[q->cap++] = elm;
	pthread_cond_signal(&q->empty);
	pthread_mutex_unlock(&q->lock);
}

static char* pcq_dequeue(struct pcq* q){
	char* ret;
	pthread_mutex_lock(&q->lock);
	while (q->cap == 0)
		pthread_cond_wait(&q->lock, &q->empty);
	ret = q->q[--(q->cap)];
	pthread_cond_signal(&q->full);
	pthread_mutex_unlock(&q->lock);
	return ret;
}

#endif

static int get_path_by_fd(char* path, int fd){
	char buf[32];
    snprintf(buf, 32, "/proc/self/fd/%d", fd);
	if (realpath(buf, path)){
		return 1;
	}
	return 0;
}

static void unlink_by_fd(int fd){
	char path[PATH_MAX + 1];
	if (!get_path_by_fd(path, fd)){
		fprintf(stderr, "Failed to unlink fd %d\n", fd);
	}
	else{
		unlink(path);
	}
}